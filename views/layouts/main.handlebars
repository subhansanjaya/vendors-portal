<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@4.5.3/dist/css/bootstrap.min.css"
        integrity="sha384-TX8t27EcRE3e/ihU7zmQxVncDAy5uIKz4rEkgIXeMed4M0jlfIDPvg6uqKI2xXr2" crossorigin="anonymous">
    <title>Booking Engine</title>
    <link rel='shortcut icon' type='image/x-icon' href='/img/favicon.ico' />

    <!-- date picker -->
    <link rel="stylesheet" href="//code.jquery.com/ui/1.12.1/themes/base/jquery-ui.css">
    <script src="https://code.jquery.com/jquery-1.12.4.js"></script>
    <script src="https://code.jquery.com/ui/1.12.1/jquery-ui.js"></script>
    <!-- google place api -->
    <script src="https://maps.googleapis.com/maps/api/js?libraries=places,distancematrix&key={{apiKey}}"></script>
    <!-- date picker -->
    <script src="https://cdn.jsdelivr.net/npm/fullcalendar-scheduler@5.4.0/main.js"></script>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/fullcalendar-scheduler@5.4.0/main.css">
    <!-- moment -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.18.1/moment.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@4.5.3/dist/js/bootstrap.bundle.min.js"
        integrity="sha384-ho+j7jyWK8fNQe+A12Hb8AhRq26LrZ/JpcUGGOn+Y7RsweNrtN/tE3MoK7ZeZDyx"
        crossorigin="anonymous"></script>
    <!-- axios -->
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
</head>

<body>

    {{> _navbar}}
    <div class="container">

        {{> _msg}}
        {{> _errors}}
        {{{body}}}</div>


    <script>

        //set datapicker            
        $(function () {
            $("#datepicker").datepicker({ dateFormat: 'yy-m-d', minDate: 0 });
        });

        //add  autocompete locations for address
        $('#address').click(function () {
            // google maps api to retrieve client location
            new google.maps.places.Autocomplete(
                document.getElementById("address")
            );

        });

        // populate data to display on the calander
        function populateData(response, date) {

            var timeslots = getTimeSlots();

            // list of vendors - can be defined in the database or as a app local
            var vendors = ["vendor1", "vendor2"];

            var events = [];

            // format events to display on the calander
            vendors.forEach(function (vendor) {

                timeslots.forEach(function (timeslot) {

                    //  check if time available 
                    let convertedTime = tConvert(timeslot);
                    let timeslottomins = convertedTime.split(':').reduce((acc, time) => (60 * acc) + +time);

                    var dt = new Date();
                    var dt2 = new Date();

                    let startTime = moment(dt.setMinutes(timeslottomins)).format("HH:mm");
                    let endTime = moment(dt2.setMinutes(timeslottomins + 30)).format("HH:mm");

                    // check if time exisits in between start and end time
                    var existData = response.filter(function (item) {
                        return tConvert(item.start) <= tConvert(startTime) && tConvert(startTime) <= tConvert(item.end) && item.vendor == vendor;
                    });

                    if (existData.length < 1) {
                        events.push({
                            title: vendor,
                            vendor: vendor,
                            start: `${date}T${startTime}`,
                            end: `${date}T${endTime}`,
                            color: vendor == 'vendor1' ? 'red' : 'green'
                        })

                    }

                })

            })

            renderCalander(events, date);

        }

        //populating an array with times with half hour interval between them
        function getTimeSlots() {

            var toInt = time => ((h, m) => h * 2 + m / 30)(...time.split(':').map(parseFloat)),
                toTime = int => [Math.floor(int / 2), int % 2 ? '30' : '00'].join(':'),
                range = (from, to) => Array(to - from + 1).fill().map((_, i) => from + i),
                eachHalfHour = (t1, t2) => range(...[t1, t2].map(toInt)).map(toTime);

            return eachHalfHour('08:00', '17:30');
        }

        //return the number of minutes in hours and minutes
        function tConvert(time) {
            // Check correct time format and split into components
            time = time.toString().match(/^([01]\d|2[0-3])(:)([0-5]\d)(:[0-5]\d)?$/) || [time];

            if (time.length > 1) {
                time = time.slice(1);
                time[0] = +time[0] % 12 || 12;
            }
            return time.join('');
        }

        // on date change populate time slots view
        $('#datepicker').change(function () {

            var dateval = document.getElementById("datepicker").value;

            var bookingData = [];
            // get bookings for the selected date
            axios.get('/bookings/bookings/' + dateval)
                .then(function (response) {
                    this.response = response.data
                    return populateData(this.response, dateval);

                })
                .catch(function (error) {
                    // handle error
                    console.log(error);
                })

        })

        function renderCalander(events, dateval) {
            // fullcalander initiate
            var calendarEl = document.getElementById('calendar');

            var calendar = new FullCalendar.Calendar(calendarEl, {
                initialView: 'timeGridDay',
                navLinks: false,
                headerToolbar: {
                    left: '',
                    center: '',
                    right: ''
                },
                editable: true,
                initialDate: dateval,
                slotEventOverlap: false,
                unselectAuto: true,
                selectable: true,
                selectMirror: true,
                dayMaxEvents: false,
                height: 550,
                allDaySlot: false,
                slotMinTime: "08:00:00",
                slotMaxTime: "17:30:00",
                slotDuration: "00:30:01",
                events: events,
                eventClick: function (info) {
                    document.getElementById("start").value = moment(info.event.start).format("HH:mm");
                    document.getElementById("end").value = moment(info.event.end).format("HH:mm");
                    document.getElementById("vendor").value = info.event.title;
                    info.el.style.borderColor = 'blue';
                },
                eventResize: function (info) {
                    document.getElementById("start").value = moment(info.event.start).format("HH:mm");
                    document.getElementById("end").value = moment(info.event.end).format("HH:mm");
                    document.getElementById("vendor").value = info.event.title;

                    if (confirm("Do you want to select this time slot")) {

                        var selectedAddress = document.getElementById("address").value;
                        var selectedDate = document.getElementById("datepicker").value;
                        var vendor = info.event.title;
                        var start = moment(info.event.start).format("HH:mm");

                        var checkTravelTime = getTravelData(selectedAddress, selectedDate, vendor, start);
                        if (checkTravelTime) {
                            alert("Time slot selected");
                            info.el.style.borderColor = 'blue';
                        } else {
                            alert("Selected slot unavailable due to travel time exceeded");
                            info.revert();
                        }

                    } else {
                        info.revert();
                    }

                },
            });

            calendar.render();
        }

        // calculate travel distance at two points
        function calculateTravelDistance(existingAddress, newAddress) {

            // get lat and lng of the address
            geocoder = new google.maps.Geocoder();
            var wp = new Array();

            geocoder.geocode({ 'address': newAddress }, function (results, status) {
                if (status == google.maps.GeocoderStatus.OK) {
                    var latitude = results[0].geometry.location.lat();
                    var longitude = results[0].geometry.location.lng();
                }
            });
            wp[0] = new google.maps.LatLng(latitude, longitude);

            geocoder.geocode({ 'address': existingAddress }, function (results, status) {
                if (status == google.maps.GeocoderStatus.OK) {
                    var latitude2 = results[0].geometry.location.lat();
                    var longitude2 = results[0].geometry.location.lng();
                }
            });
            wp[1] = new new google.maps.LatLng(latitude2, longitude2);

            var directions = new google.maps.DirectionsService();
            directions = new google.maps.DirectionsRenderer();

            directions.loadFromWaypoints(wp);

            GEvent.addListener(directions, "load", function () {
                var travelTime = (directions.getDuration().seconds) / 60;
            });

            if (travelTime < 30) {
                return true;
            }

        }

        // get traval distance
        function getTravelData(selectedAddress, selectedDate, vendor, start) {

            axios.get('/bookings/closest/', {
                params: {
                    date: selectedDate,
                    start: start,
                    vendor: vendor,
                    address: selectedAddress
                }
            })
                .then(function (response) {
                    this.response = response.data;
                    return calculateTravelDistance(selectedAddress, response.data.address);

                })
                .catch(function (error) {
                    // handle error
                    console.log(error);
                })

        }
    </script>
</body>

</html>